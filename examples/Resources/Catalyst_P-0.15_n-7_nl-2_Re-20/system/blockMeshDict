/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2312                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale   0.001;
Rext $R;
Lf $Lfront;
Lc $Lcat;
Lb $Lback;
Fiz #calc " - $Lf - $Lc /2";   //z coordinate of the fluid inlet
Foz #calc " $Lb + $Lc /2";    //z coordinate of the fluid outlet
Sqside #calc "$Rext";
nCellsR $NCellsRadius;

nCellsSqside #codeStream
{
    code
    #{
        scalar nCellsR = Foam::readScalar(dict.lookup("nCellsR"));
        scalar R = Foam::readScalar(dict.lookup("Rext"));
        scalar Sqside = Foam::readScalar(dict.lookup("Sqside"));
        scalar nCellsSqside = (int)round(nCellsR*Sqside/R);
        //Info << "--------------------------------------------------------- nCellsSqside = " << nCellsSqside << endl;
        writeEntry(os, "", nCellsSqside);
    #};
};

nCellsR_Sqside #codeStream
{
    code
    #{
        scalar nCellsR = Foam::readScalar(dict.lookup("nCellsR"));
        scalar R = Foam::readScalar(dict.lookup("Rext"));
        scalar Sqside = Foam::readScalar(dict.lookup("Sqside"));
        scalar nCellsR_Sqside = (int)round(nCellsR*(R-(Sqside/sqrt(2.0)))/R);
        //Info << "--------------------------------------------------------- nCellsSqside = " << nCellsR_Sqside << endl;
        writeEntry(os, "", nCellsR_Sqside);
    #};
};

nCellsLong #codeStream
{
    code
    #{
        scalar nCellsR = Foam::readScalar(dict.lookup("nCellsR"));
        scalar R = Foam::readScalar(dict.lookup("Rext"));
        scalar Fiz = Foam::readScalar(dict.lookup("Fiz"));
        scalar Foz = Foam::readScalar(dict.lookup("Foz"));
        scalar nCellsLong = (int)round(nCellsR*(Foz-Fiz)/R);
        //Info << "--------------------------------------------------------- nCellsLong = " << nCellsLong << endl;
        writeEntry(os, "", nCellsLong);
    #};
};

vertices
(
    (0.0                #calc "$Rext"       #calc "$Fiz")   // 0
    (#calc "$Rext"      0.0                 #calc "$Fiz")   // 1
    (0.0                #calc " - $Rext"    #calc "$Fiz")   // 2
    (#calc " - $Rext"   0.0                 #calc "$Fiz")   // 3
    (0.0                #calc "$Rext"       #calc "$Foz")      // 4
    (#calc "$Rext"      0.0                 #calc "$Foz")      // 5
    (0.0                #calc " - $Rext"    #calc "$Foz")      // 6
    (#calc " - $Rext"   0.0                 #calc "$Foz")      // 7
    (0.0                            #calc "$Sqside / sqrt(2.0)"     #calc "$Fiz")  // 8
    (#calc "$Sqside / sqrt(2.0)"    0.0                             #calc "$Fiz")  // 9
    (0.0                            #calc "-$Sqside / sqrt(2.0)"    #calc "$Fiz")  // 10
    (#calc "-$Sqside / sqrt(2.0)"   0.0                             #calc "$Fiz")  // 11

    (0.0                            #calc "$Sqside / sqrt(2.0)"     #calc "$Foz")  // 12
    (#calc "$Sqside / sqrt(2.0)"    0.0                             #calc "$Foz")  // 13
    (0.0                            #calc "-$Sqside / sqrt(2.0)"    #calc "$Foz")  // 14
    (#calc "-$Sqside / sqrt(2.0)"   0.0                             #calc "$Foz")  // 15
);

blocks
(
    hex (8 11 10 9 12 15 14 13) backgroundbrick ($nCellsSqside  $nCellsSqside   $nCellsLong) simpleGrading (1 1 1)
    hex (0 3 11 8 4 7 15 12)    backgroundbrick ($nCellsSqside  $nCellsR_Sqside $nCellsLong) simpleGrading (1 1 1)
    hex (1 0 8 9 5 4 12 13)     backgroundbrick ($nCellsSqside  $nCellsR_Sqside $nCellsLong) simpleGrading (1 1 1)
    hex (3 2 10 11 7 6 14 15)   backgroundbrick ($nCellsSqside  $nCellsR_Sqside $nCellsLong) simpleGrading (1 1 1)
    hex (2 1 9 10 6 5 13 14)    backgroundbrick ($nCellsSqside  $nCellsR_Sqside $nCellsLong) simpleGrading (1 1 1)
);

edges
(
    arc 1 0 (#calc "$Rext / sqrt(2.0)"      #calc "$Rext / sqrt(2.0)"       #calc "$Fiz")
    arc 2 1 (#calc "$Rext / sqrt(2.0)"      #calc " - $Rext / sqrt(2.0)"    #calc "$Fiz")
    arc 3 2 (#calc " - $Rext / sqrt(2.0)"   #calc " - $Rext / sqrt(2.0)"    #calc "$Fiz")
    arc 0 3 (#calc " - $Rext / sqrt(2.0)"   #calc "$Rext / sqrt(2.0)"       #calc "$Fiz")
    arc 5 4 (#calc "$Rext / sqrt(2.0)"      #calc "$Rext / sqrt(2.0)"       #calc "$Foz")
    arc 6 5 (#calc "$Rext / sqrt(2.0)"      #calc " - $Rext / sqrt(2.0)"    #calc "$Foz")
    arc 7 6 (#calc " - $Rext / sqrt(2.0)"   #calc " - $Rext / sqrt(2.0)"    #calc "$Foz")
    arc 4 7 (#calc " - $Rext / sqrt(2.0)"   #calc "$Rext / sqrt(2.0)"       #calc "$Foz")
);

boundary
(
    fluidInlet
    {
        type patch;
        faces
        (
            (0 1 9 8)
            (1 2 10 9)
            (2 3 11 10)
            (0 8 11 3)
            (8 9 10 11)
        );
    }
    fluidOutlet
    {
        type patch;
        faces
        (
            (4 12 13 5)
            (4 7 15 12)
            (5 13 14 6)
            (6 14 15 7)
            (12 15 14 13)
        );
    }
    cylExtSurf
    {
        type patch;
        faces
        (
            (0 4 5 1)
            (0 3 7 4)
            (2 6 7 3)
            (1 5 6 2)
        );
    }
);


// ************************************************************************* //
